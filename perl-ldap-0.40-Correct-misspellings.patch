From 26c622cba124c40c764dffb73edaa210005a770e Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Petr=20P=C3=ADsa=C5=99?= <ppisar@redhat.com>
Date: Tue, 4 Oct 2016 14:21:30 +0200
Subject: [PATCH] Correct misspellings
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Signed-off-by: Petr Písař <ppisar@redhat.com>
---
 lib/Net/LDAP.pod          |  8 ++++----
 lib/Net/LDAP/Entry.pod    |  6 +++---
 lib/Net/LDAP/Examples.pod |  4 ++--
 lib/Net/LDAP/FAQ.pod      | 18 +++++++++---------
 lib/Net/LDAP/Filter.pod   |  2 +-
 lib/Net/LDAP/LDIF.pod     |  8 ++++----
 lib/Net/LDAP/Message.pod  |  2 +-
 lib/Net/LDAP/Schema.pod   |  2 +-
 lib/Net/LDAP/Search.pod   |  2 +-
 lib/Net/LDAP/Security.pod | 10 +++++-----
 10 files changed, 31 insertions(+), 31 deletions(-)

diff --git a/lib/Net/LDAP.pod b/lib/Net/LDAP.pod
index 40f1868..fe4a306 100644
--- a/lib/Net/LDAP.pod
+++ b/lib/Net/LDAP.pod
@@ -489,7 +489,7 @@ entry, it will be created.
 Atomically increment the existing value in each given attribute by the
 provided C<VALUE>. The attributes need to have integer syntax, or be
 otherwise "incrementable". Note this will only work if the server
-advertizes support for LDAP_FEATURE_MODIFY_INCREMENT. Use 
+advertises support for LDAP_FEATURE_MODIFY_INCREMENT. Use
 L<Net::LDAP::RootDSE/supported_feature> to check this.
 
   $mesg = $ldap->modify( $dn,
@@ -702,7 +702,7 @@ so that the regular Perl operators (pattern matching, ...) can operate
 as one expects even on strings with international characters.
 
 If this option is not given or the version of Perl Net::LDAP is running on
-is too old strings are encodeed the same as in earlier versions of perl-ldap.
+is too old strings are encoded the same as in earlier versions of perl-ldap.
 
 The value provided here overwrites the value inherited from the constructor.
 
@@ -725,7 +725,7 @@ B<Example>
 Calling this method will convert the existing connection to using
 Transport Layer Security (TLS), which provides an encrypted
 connection. This is I<only> possible if the connection uses LDAPv3,
-and requires that the server advertizes support for
+and requires that the server advertises support for
 LDAP_EXTENSION_START_TLS. Use
 L<Net::LDAP::RootDSE/supported_extension> to check this.
 
@@ -1060,7 +1060,7 @@ L<Net::LDAP::RFC>
 The homepage for the perl-ldap modules can be found at 
 http://ldap.perl.org/.
 
-=head1 ACKNOWLEDGEMENTS
+=head1 ACKNOWLEDGMENTS
 
 This document is based on a document originally written by Russell Fulton
 E<lt>r.fulton@auckland.ac.nzE<gt>.
diff --git a/lib/Net/LDAP/Entry.pod b/lib/Net/LDAP/Entry.pod
index fd4de1b..e5d1536 100644
--- a/lib/Net/LDAP/Entry.pod
+++ b/lib/Net/LDAP/Entry.pod
@@ -226,8 +226,8 @@ Returns the entry as an LDIF string. possible options
 =item change =E<gt> VALUE
 
 If given a true value then the LDIF will be generated as a change record.
-If flase, then the LDIF generated will represent the entry content. If
-unspecified then it will fefault to true if the entry has changes and
+If false, then the LDIF generated will represent the entry content. If
+unspecified then it will default to true if the entry has changes and
 false if no changes have been applied to the entry.
 
 =back
@@ -300,7 +300,7 @@ called C<name> then $ref will be C<undef>.
 
 B<NOTE>: In the interest of performance the array references returned
 by C<get_value> are references to structures held inside the entry
-object. These values and thier contents should B<NOT> be modified
+object. These values and their contents should B<NOT> be modified
 directly.
 
 =item replace ( ATTR =E<gt> VALUE, ... )
diff --git a/lib/Net/LDAP/Examples.pod b/lib/Net/LDAP/Examples.pod
index c54561a..f01b59b 100644
--- a/lib/Net/LDAP/Examples.pod
+++ b/lib/Net/LDAP/Examples.pod
@@ -15,7 +15,7 @@ a small amount of work to correct any variable assignments and LDAP
 specifics, e.g. Distinguished Name Syntax, related to the user's
 own implementation.
 
-The I<S>tandard I<O>perating I<P>roceedure that is followed here is:
+The I<S>tandard I<O>perating I<P>rocedure that is followed here is:
 
 =over 8
 
@@ -262,7 +262,7 @@ B<What is not covered in these examples at this time:>
  my @AddArray;
 
  push @AddArray, 'cn', "me myself";
- push @ReplaceArray, 'sn', '!@#$%^&*()__+Hello THere';
+ push @ReplaceArray, 'sn', '!@#$%^&*()__+Hello There';
  push @ReplaceArray, 'cn', "me myself I";
  push @DeleteArray, 'cn', "me myself";
 
diff --git a/lib/Net/LDAP/FAQ.pod b/lib/Net/LDAP/FAQ.pod
index c05c540..0012093 100644
--- a/lib/Net/LDAP/FAQ.pod
+++ b/lib/Net/LDAP/FAQ.pod
@@ -303,7 +303,7 @@ Example of a DN:
  RDN => dc=com
 
 RDNs can contain multiple attributes, though this is somewhat
-ususual. They are called multi-AVA RDNs, and each AVA is separated in
+unusual. They are called multi-AVA RDNs, and each AVA is separated in
 the RDN from the others with a plus sign (+).
 
 Example of a DN with a multi-AVA RDN:
@@ -484,7 +484,7 @@ have make installed.
 =head2 What other modules will I need ?
 
 perl-ldap does use other modules. Some are required, but some are
-optional (ie required to use certain features)
+optional (i.e. required to use certain features)
 
 =over 4
 
@@ -864,7 +864,7 @@ Example:
    # may be very important, they will reduce the amount of memory 
    # used by the search results.
    #
-   # If the user is not worried about memory useage then the 2 lines
+   # If the user is not worried about memory usage then the 2 lines
    # of code can be omitted.
    #
    $mesg->pop_entry;
@@ -1119,7 +1119,7 @@ attribute name and no values.
 In LDAPv3, this is defined to always work even if that attribute
 doesn't exist in the entry.
 
-ie:
+i.e.:
 
   my $mesg = $ldap->modify( $entry, replace => { %qv_del_arry } );
 
@@ -1209,7 +1209,7 @@ replace the placeholders.
   $mysid = uc(unpack("H*",$sid));
 
   $result = $exch->add ( dn   =>
-                'cn=user_name,cn=container,ou=site,o=organisation',
+                'cn=user_name,cn=container,ou=site,o=organization',
                 attr => [ 'objectClass' => ['organizationalPerson'],
                           'cn'   => 'directory_name',
                           'uid' => 'mail_nickname',
@@ -1242,7 +1242,7 @@ Whether the extended Password Modify operation is available can be
 found out by searching the attribute supportedExtension for the
 value 1.3.6.1.4.1.4203.1.11.1 in the RootDSE object.
 
-If the extended Password Modify operation is not avaiable the
+If the extended Password Modify operation is not available the
 alternative is the regular modification of the userPassword attribute.
 
 But this method has some drawbacks:
@@ -1253,7 +1253,7 @@ But this method has some drawbacks:
 
 Depending on the type of the server the arguments to the modify
 operations may vary. Some want the modify done with replace,
-some want it done by explicitely deleting the old password
+some want it done by explicitly deleting the old password
 and add of the new one.
 This may even depend on whether you change the password for the bound
 user or as an administrator for another user.
@@ -1315,7 +1315,7 @@ For the password modify operation to succeed SSL is required.
 When changing the password for the user bound to the directory
 ADS expects it to be done by deleting the old password and
 adding the new one.
-When doing it as a user with administrative priviledges replacing
+When doing it as a user with administrative privileges replacing
 the unicodePwd's value with a new one is allowed too.
 
 Here's an example that demonstrates setting your own password
@@ -1492,7 +1492,7 @@ Sun One, formerly Iplanet.
 http://wwws.sun.com/software/
 
 Eine deutsche LDAP Website 
-A german LDAP Website
+A German LDAP Website
 http://verzeichnisdienst.de/ldap/Perl/index.html
 
 The 2 following URLs deal mainly with Microsoft's
diff --git a/lib/Net/LDAP/Filter.pod b/lib/Net/LDAP/Filter.pod
index 13fcf86..63b77c1 100644
--- a/lib/Net/LDAP/Filter.pod
+++ b/lib/Net/LDAP/Filter.pod
@@ -86,7 +86,7 @@ RFC-2254 http://www.ietf.org/rfc/rfc2254.txt
 L<Net::LDAP>,
 L<Other online documentation|Net::LDAP::RFC>
 
-=head1 ACKNOWLEDGEMENTS
+=head1 ACKNOWLEDGMENTS
 
 This document is based on a document originally written by Russell Fulton
 E<lt>r.fulton@auckland.ac.nzE<gt>.
diff --git a/lib/Net/LDAP/LDIF.pod b/lib/Net/LDAP/LDIF.pod
index aaf2c52..e480fed 100644
--- a/lib/Net/LDAP/LDIF.pod
+++ b/lib/Net/LDAP/LDIF.pod
@@ -41,7 +41,7 @@ C<FILE> will be passed directly to C<open>.
 
 =item new ( FILE, MODE, OPTIONS )
 
-Open the file with the given C<MODE>, eg "w" or "a". C<FILE> may be
+Open the file with the given C<MODE>, e.g. "w" or "a". C<FILE> may be
 the name of a file or an already open filehandle. If C<FILE> begins or
 ends with a C<|> then C<FILE> will be passed directly to C<open>.
 
@@ -131,7 +131,7 @@ so that the regular Perl operators (pattern matching, ...) can operate
 as one expects even on strings with international characters.
 
 If this option is not given or the version of Perl Net::LDAP is running on
-is too old strings are encodeed the same as in earlier versions of perl-ldap.
+is too old strings are encoded the same as in earlier versions of perl-ldap.
 
 Example: raw =E<gt> qr/(?i:^jpegPhoto|;binary)/
 
@@ -158,10 +158,10 @@ Write the entries to the LDIF file.
 
 =item write_version ( )
 
-If the object's version is defined, this method allows to explicitely
+If the object's version is defined, this method allows to explicitly
 write the version before an entry is written.
 
-If  not called explicitely, it gets called automatically when writing
+If  not called explicitly, it gets called automatically when writing
 the first entry.
 
 =item version ( [ VERSION ] )
diff --git a/lib/Net/LDAP/Message.pod b/lib/Net/LDAP/Message.pod
index 3846e8e..5229a52 100644
--- a/lib/Net/LDAP/Message.pod
+++ b/lib/Net/LDAP/Message.pod
@@ -111,7 +111,7 @@ L<Net::LDAP::Search>,
 L<Net::LDAP::Constant>,
 L<Net::LDAP::Util>
 
-=head1 ACKNOWLEDGEMENTS
+=head1 ACKNOWLEDGMENTS
 
 This document is based on a document originally written by Russell
 Fulton E<lt>r.fulton@auckland.ac.nzE<gt>.
diff --git a/lib/Net/LDAP/Schema.pod b/lib/Net/LDAP/Schema.pod
index 4edab7c..7232e65 100644
--- a/lib/Net/LDAP/Schema.pod
+++ b/lib/Net/LDAP/Schema.pod
@@ -32,7 +32,7 @@ may be an object class, attribute or syntax) then a case-insensitive name
 or raw oid (object identifier, in dotted numeric string form, e.g. 2.5.4.0)
 may be supplied.
 
-Each returned item of schema (eg an attribute definition) is returned
+Each returned item of schema (e.g. an attribute definition) is returned
 in a HASH. The keys in the returned HASH are lowercased versions of
 the keys read from the server. Here's a partial list (not all HASHes
 define all keys) although note that RFC 2252 permits other keys as
diff --git a/lib/Net/LDAP/Search.pod b/lib/Net/LDAP/Search.pod
index 7494fc6..920bbc1 100644
--- a/lib/Net/LDAP/Search.pod
+++ b/lib/Net/LDAP/Search.pod
@@ -102,7 +102,7 @@ L<Net::LDAP::Message>,
 L<Net::LDAP::Entry>,
 L<Net::LDAP::Reference>
 
-=head1 ACKNOWLEDGEMENTS
+=head1 ACKNOWLEDGMENTS
 
 This document is based on a document originally written by Russell
 Fulton E<lt>r.fulton@auckland.ac.nzE<gt>.
diff --git a/lib/Net/LDAP/Security.pod b/lib/Net/LDAP/Security.pod
index 7c6e1f6..78b4122 100644
--- a/lib/Net/LDAP/Security.pod
+++ b/lib/Net/LDAP/Security.pod
@@ -130,7 +130,7 @@ standardized version of SSL.
 
 You can only use TLS with an LDAPv3 server. That is because the
 standard (RFC 2830) for LDAP and TLS requires that the I<normal> LDAP
-connection (ie., on port 389) can be switched on demand from plain text
+connection (i.e., on port 389) can be switched on demand from plain text
 into a TLS connection. The switching mechanism uses a special extended
 LDAP operation, and since these are not legal in LDAPv2, you can only
 switch to TLS on an LDAPv3 connection.
@@ -151,18 +151,18 @@ I<mechanism>. A number of mechanisms are defined, such as CRAM-MD5.
 
 The use of a mechanism like CRAM-MD5 provides a solution to the
 password sniffing vulnerability, because these mechanisms typically do
-not require the user to send across a secret (eg., a password) in the
+not require the user to send across a secret (e.g., a password) in the
 clear across the network. Instead, authentication is carried out in a
 clever way which avoids this, and so prevents passwords from being
 sniffed.
 
 B<Net::LDAP> supports SASL using the B<Authen::SASL> class. Currently the
-only B<Authen::SASL> subclasses (ie., SASL mechanism) available are
+only B<Authen::SASL> subclasses (i.e., SASL mechanism) available are
 CRAM-MD5 and EXTERNAL.
 
 Some SASL mechanisms provide a general solution to the sniffing of all
 data on the network vulnerability, as they can negotiate confidential
-(ie., encrypted) network connections. Note that this is over and above
+(i.e., encrypted) network connections. Note that this is over and above
 any SSL or TLS encryption! Unfortunately, perl's B<Authen::SASL> code
 cannot negotiate this.
 
@@ -172,7 +172,7 @@ L<Net::LDAP>,
 L<Net::LDAPS>,
 L<Authen::SASL>
 
-=head1 ACKNOWLEDGEMENTS
+=head1 ACKNOWLEDGMENTS
 
 Jim Dutton E<lt>jimd@dutton3.it.siu.eduE<gt> provided lots of useful feedback
 on the early drafts.
-- 
2.7.4

